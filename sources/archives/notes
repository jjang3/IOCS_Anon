
PTACallGraph *buildDTAInputGraph(SVFModule *input, PTACallGraph *PTACG) 
{
    PTACallGraph *output = new PTACallGraph();
    
    auto &callInstToCGEdgesM = PTACG->getCallInstToCallGraphEdgesMap();
    for (auto mapIt = callInstToCGEdgesM.begin(); mapIt != callInstToCGEdgesM.end(); mapIt++) {
        auto *cbNode = mapIt->first;
        auto cgEdgeSet = mapIt->second;
        
        #if 0
        auto *caller = cbNode->getCaller();
        auto *callsite = cbNode->getCallSite();
        #endif

        PTACallGraph::FunctionSet funSet;
        PTACG->getCallees(cbNode, funSet);

        for (auto funSetIt = funSet.begin(); funSetIt != funSet.end(); funSetIt++) {
            const SVFFunction *callee = *funSetIt;
            icfg_dbg << callee->getName().c_str() << "\n";
        }

        // iterate each ICFGNode on ICFG
        for(PTACallGraph::iterator i = PTACG->begin(); i != PTACG->end(); i++)
        {
           // auto *n = i->second;
        }

    
    }
    #if 0
    for (SVFModule::const_iterator F = input->begin(), FE = input->end(); F != FE; ++F)
    {
        const SVFFunction *svfFun = *F;
        for (SVFFunction::const_iterator BB = svfFun->begin(), BE = svfFun->end(); BB != BE; ++BB)
        {
            const SVFBasicBlock *svfBB = *BB;
            for (SVFBasicBlock::const_iterator I = svfBB->begin(), IE = svfBB->end(); I != IE; ++I)
            {
                const SVFInstruction *svfI = *I;
            }
        }
        output->addCallGraphNode(*F);
    }
    #endif
    #if 0
    for (SVFModule::const_iterator F = input->begin(), E = input->end(); F != E; ++F)
    {
        for (const SVFBasicBlock* svfbb : (*F)->getBasicBlockList())
        {
            for (const SVFInstruction* inst : svfbb->getInstructionList())
            {
                if(isCallSite(inst))
                {
                    auto instCallSite = getSVFCallSite(inst);
                    auto instCallee  = getCallee(instCallSite);
                    const CallICFGNode* callBlockNode = icfg->getCallICFGNode(inst);
                    output->addDirectCallGraphEdge(callBlockNode, *F, instCallee);
                    icfg_dbg << "Found: " << inst->toString() << " " << inst->getFunction()->toString() << "\n";
                }
            }
        }
    }
    #endif
    return output;
}

vector<ICFGNode*> getAllICFGStartPoints(ICFG* icfg) {
	int counter = 1;
	vector<ICFGNode*> startingPoints;
	for(ICFG::iterator i = icfg->begin(); i != icfg->end(); i++) {
		ICFGNode* node = i->second;
		if (!node->hasIncomingEdge()) {
			unordered_set<NodeID> visited;
			// SVFUtil::outs() << "STARTPOINT COUNTER: " << counter << "\n";
			startingPoints.push_back(node);
			counter++;
		}
	}
	return startingPoints;
}
    //pag->dump(graphName);
    // iterate each ICFGNode on ICFG
    #if 0
    vector<ICFGNode*> startingPoints = getAllICFGStartPoints(icfg);
    for (auto item : startingPoints)
    {
        //SVFUtil::outs() << item->toString() << "\n";
    }
    #endif
    #if 0
    for(ICFG::iterator inode = icfg->begin(); inode != icfg->end(); inode++)
    {
        ICFGNode *n = inode->second;
        //SVFUtil::outs() << n->toString() << "\n";
        // for(ICFGEdge* edge : n->getOutEdges()){
        //     SVFUtil::outs() << edge->toString() << "\n";
        // }
        #if 0
        
        else if (SVFUtil::isa<IntraICFGNode>(n))
        {
            icfg_dbg << "IntraICFG: " << n->toString().c_str() << "\n";
        }
        #endif
        #if 1
        if (SVFUtil::isa<FunEntryICFGNode>(n))
        {
            icfg_dbg << "Fun entry: " << n->toString().c_str() << "\n";
        }
        if (SVFUtil::isa<CallICFGNode>(n)) { 
            CallICFGNode* callNode =  SVFUtil::cast<CallICFGNode>(n);
            /*
            if (callNode->getSVFStmts().empty())
                icfg_dbg << callNode->toString().c_str() << " " <<  callNode->getCallSite()->toString().c_str() << "\n";
            */
            //const SVFInstruction* svfInst = callNode->getCallSite();
            //auto sourceLoc =  callNode->getCallSite()->getFunction()->getSourceLoc();
            //icfg_dbg << svfInst->toString().c_str() << " Line number: " << sourceLoc << "\n";
        } 
        #endif         
    }
    #endif
    /// Create Andersen's pointer analysis
    //Andersen* ander = AndersenWaveDiff::createAndersenWaveDiff(pag);
    //ander->getPTACallGraph()->dump(graphName);

    #if 0
    /// Sparse value-flow graph (SVFG)
    SVFGBuilder svfBuilder(true);
    //SVFG* svfg =
    auto svfg_build = svfBuilder.buildFullSVFG(ander);

    for(auto i = svfg_build->begin(); i != svfg_build->end(); i++)
    {
        //icfg_dbg << i->second->Addr  << "\n";
    }
    #endif
    // Create graph nodes without intrinsic functions
    //callgraph = buildDTAInputGraph(svfModule, ander->getPTACallGraph());
    //callgraph->dump(graphName);
    //AnalysisResult = extractCallGraph(M, callgraph);
    